/* Auto-generated by genmsg_cpp for file /home/robot/kinetic_workspace/sandbox/project/COMPSCI403FinalProject/final_project/srv/GetCommandVelSrv.srv */
#ifndef FINAL_PROJECT_SERVICE_GETCOMMANDVELSRV_H
#define FINAL_PROJECT_SERVICE_GETCOMMANDVELSRV_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "sensor_msgs/Image.h"
#include "geometry_msgs/Point32.h"
#include "geometry_msgs/Point32.h"


#include "geometry_msgs/Point32.h"
#include "geometry_msgs/Point32.h"

namespace final_project
{
template <class ContainerAllocator>
struct GetCommandVelSrvRequest_ {
  typedef GetCommandVelSrvRequest_<ContainerAllocator> Type;

  GetCommandVelSrvRequest_()
  : Image()
  , v0()
  , w0()
  {
  }

  GetCommandVelSrvRequest_(const ContainerAllocator& _alloc)
  : Image(_alloc)
  , v0(_alloc)
  , w0(_alloc)
  {
  }

  typedef  ::sensor_msgs::Image_<ContainerAllocator>  _Image_type;
   ::sensor_msgs::Image_<ContainerAllocator>  Image;

  typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _v0_type;
   ::geometry_msgs::Point32_<ContainerAllocator>  v0;

  typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _w0_type;
   ::geometry_msgs::Point32_<ContainerAllocator>  w0;


  typedef boost::shared_ptr< ::final_project::GetCommandVelSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::final_project::GetCommandVelSrvRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct GetCommandVelSrvRequest
typedef  ::final_project::GetCommandVelSrvRequest_<std::allocator<void> > GetCommandVelSrvRequest;

typedef boost::shared_ptr< ::final_project::GetCommandVelSrvRequest> GetCommandVelSrvRequestPtr;
typedef boost::shared_ptr< ::final_project::GetCommandVelSrvRequest const> GetCommandVelSrvRequestConstPtr;



template <class ContainerAllocator>
struct GetCommandVelSrvResponse_ {
  typedef GetCommandVelSrvResponse_<ContainerAllocator> Type;

  GetCommandVelSrvResponse_()
  : Cv()
  , Cw()
  {
  }

  GetCommandVelSrvResponse_(const ContainerAllocator& _alloc)
  : Cv(_alloc)
  , Cw(_alloc)
  {
  }

  typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _Cv_type;
   ::geometry_msgs::Point32_<ContainerAllocator>  Cv;

  typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _Cw_type;
   ::geometry_msgs::Point32_<ContainerAllocator>  Cw;


  typedef boost::shared_ptr< ::final_project::GetCommandVelSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::final_project::GetCommandVelSrvResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct GetCommandVelSrvResponse
typedef  ::final_project::GetCommandVelSrvResponse_<std::allocator<void> > GetCommandVelSrvResponse;

typedef boost::shared_ptr< ::final_project::GetCommandVelSrvResponse> GetCommandVelSrvResponsePtr;
typedef boost::shared_ptr< ::final_project::GetCommandVelSrvResponse const> GetCommandVelSrvResponseConstPtr;


struct GetCommandVelSrv
{

typedef GetCommandVelSrvRequest Request;
typedef GetCommandVelSrvResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetCommandVelSrv
} // namespace final_project

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::final_project::GetCommandVelSrvRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::final_project::GetCommandVelSrvRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::final_project::GetCommandVelSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6abb3cb3c4d3a2838a634c9f26e13cdb";
  }

  static const char* value(const  ::final_project::GetCommandVelSrvRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6abb3cb3c4d3a283ULL;
  static const uint64_t static_value2 = 0x8a634c9f26e13cdbULL;
};

template<class ContainerAllocator>
struct DataType< ::final_project::GetCommandVelSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "final_project/GetCommandVelSrvRequest";
  }

  static const char* value(const  ::final_project::GetCommandVelSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::final_project::GetCommandVelSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sensor_msgs/Image Image\n\
geometry_msgs/Point32 v0\n\
geometry_msgs/Point32 w0\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const  ::final_project::GetCommandVelSrvRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::final_project::GetCommandVelSrvResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::final_project::GetCommandVelSrvResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::final_project::GetCommandVelSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c587a607b40c5d69987ec528bee6ee8f";
  }

  static const char* value(const  ::final_project::GetCommandVelSrvResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc587a607b40c5d69ULL;
  static const uint64_t static_value2 = 0x987ec528bee6ee8fULL;
};

template<class ContainerAllocator>
struct DataType< ::final_project::GetCommandVelSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "final_project/GetCommandVelSrvResponse";
  }

  static const char* value(const  ::final_project::GetCommandVelSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::final_project::GetCommandVelSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Point32 Cv\n\
geometry_msgs/Point32 Cw\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const  ::final_project::GetCommandVelSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::final_project::GetCommandVelSrvResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::final_project::GetCommandVelSrvRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.Image);
    stream.next(m.v0);
    stream.next(m.w0);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct GetCommandVelSrvRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::final_project::GetCommandVelSrvResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.Cv);
    stream.next(m.Cw);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct GetCommandVelSrvResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<final_project::GetCommandVelSrv> {
  static const char* value() 
  {
    return "f3ec071038723cac47826a5f79b9a4b2";
  }

  static const char* value(const final_project::GetCommandVelSrv&) { return value(); } 
};

template<>
struct DataType<final_project::GetCommandVelSrv> {
  static const char* value() 
  {
    return "final_project/GetCommandVelSrv";
  }

  static const char* value(const final_project::GetCommandVelSrv&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<final_project::GetCommandVelSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f3ec071038723cac47826a5f79b9a4b2";
  }

  static const char* value(const final_project::GetCommandVelSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<final_project::GetCommandVelSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "final_project/GetCommandVelSrv";
  }

  static const char* value(const final_project::GetCommandVelSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<final_project::GetCommandVelSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f3ec071038723cac47826a5f79b9a4b2";
  }

  static const char* value(const final_project::GetCommandVelSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<final_project::GetCommandVelSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "final_project/GetCommandVelSrv";
  }

  static const char* value(const final_project::GetCommandVelSrvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // FINAL_PROJECT_SERVICE_GETCOMMANDVELSRV_H

